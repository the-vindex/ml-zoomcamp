#!/usr/bin/env python3
"""
Solution generated by Claude Code for cross-check
"""

import pandas as pd
import numpy as np

def main():
    # Load dataset
    df = pd.read_csv('car_fuel_efficiency.csv')
    print("=== ML Zoomcamp 2025 - Homework 1 Results ===\n")

    # Q1: Pandas version
    print('Q1: Pandas version')
    print(f'Pandas version: {pd.__version__}')
    print()

    # Q2: Records count
    print('Q2: Records count')
    num_records = len(df)
    print(f'Number of records: {num_records}')
    print()

    # Q3: Fuel types
    print('Q3: Fuel types')
    fuel_types = df['fuel_type'].unique()
    print(f'Unique fuel types: {fuel_types}')
    print(f'Number of fuel types: {len(fuel_types)}')
    print()

    # Q4: Missing values
    print('Q4: Missing values')
    missing_values = df.isnull().sum()
    columns_with_missing = (missing_values > 0).sum()
    print(f'Columns with missing values: {columns_with_missing}')
    print('Missing values by column:')
    print(missing_values[missing_values > 0])
    print()

    # Q5: Max fuel efficiency for Asian cars
    print('Q5: Max fuel efficiency for Asian cars')
    asian_cars = df[df['origin'] == 'Asia']
    print(f'Number of Asian cars: {len(asian_cars)}')
    max_efficiency_asia = asian_cars['fuel_efficiency_mpg'].dropna().max()
    print(f'Maximum fuel efficiency for Asian cars: {max_efficiency_asia}')
    print()

    # Q6: Median horsepower analysis
    print('Q6: Median horsepower analysis')
    # Step 1: Find initial median
    initial_median = df['horsepower'].median()
    print(f'Initial median horsepower: {initial_median}')

    # Step 2: Find most frequent horsepower value
    most_frequent_hp = df['horsepower'].mode()[0]
    print(f'Most frequent horsepower value: {most_frequent_hp}')

    # Step 3: Fill missing values with most frequent value
    df_filled = df.copy()
    df_filled['horsepower'] = df_filled['horsepower'].fillna(most_frequent_hp)

    # Step 4: Recalculate median
    new_median = df_filled['horsepower'].median()
    print(f'New median horsepower after filling: {new_median}')

    # Check if it changed
    changed = initial_median != new_median
    print(f'Has the median changed? {"Yes" if changed else "No"}')
    if changed:
        if new_median > initial_median:
            print('The median increased')
        else:
            print('The median decreased')
    print()

    # Q7: Matrix calculation
    print('Q7: Matrix calculation')

    # Step 1: Select all cars from Asia
    asian_cars = df[df['origin'] == 'Asia']
    print(f'Asian cars count: {len(asian_cars)}')

    # Step 2: Select columns vehicle_weight and model_year
    selected_data = asian_cars[['vehicle_weight', 'model_year']]

    # Step 3: Select first 7 values (handle NaN values)
    first_7_clean = selected_data.dropna().head(7)
    print('First 7 clean rows used for calculation:')
    print(first_7_clean)

    # Step 4: Get underlying NumPy array
    X = first_7_clean.values
    print(f'X shape: {X.shape}')

    # Step 5: Compute X.T * X
    XTX = np.dot(X.T, X)

    # Step 6: Invert XTX
    XTX_inv = np.linalg.inv(XTX)

    # Step 7: Create array y
    y = np.array([1100, 1300, 800, 900, 1000, 1100, 1200])

    # Step 8: Multiply inv(XTX) * X.T * y
    w = np.dot(np.dot(XTX_inv, X.T), y)
    print('w:')
    print(w)

    # Step 9: Sum of all elements in w
    sum_w = np.sum(w)
    print(f'Sum of all elements in w: {sum_w}')
    print()

if __name__ == "__main__":
    main()